#define _CRT_SECURE_NO_WARNINGS 
#include<iostream>
#include<vector>
using namespace std;

int D, W, K, cnt = 0;
int visited[(1 << 13) - 1] = { false };

int min(int a, int b) {
	if (a < b) return a;
	else return b;
}

bool check(vector<vector<int> >map) {
	bool test = true;
	for (int j = 0; j < W; j++) {
		bool pass = false;
		for (int i = 0; i < D;) {
			int cnt = 0, k = i;
			while (k < D && (map[i][j] == map[k][j])) {
				k++;
				cnt++;
			}
			
			if (cnt >= K) {
				pass = true;
				break;
			}
			i += cnt;
		}
		test &= pass;
	}
	return test;
}

void print(vector<vector<int> > map, int level) {
	cout << ++cnt << endl;
	for (int x = 0; x < D; x++) {
		for (int y = 0; y < W; y++) {
			cout << map[x][y] << " ";
		}
		cout << endl;
	}
}
bool inject(vector<vector<int> > map, int select) {
	if (select == 0) return check(map);

	vector<vector<int> > mapA;
	vector<vector<int> > mapB;

	int index;
	for (int i = 0; i < D; i++) {
		if (select & (1 << i)) { index = i; break; }
	}
	select &= ~(1 << index);

	map[index] = vector<int>(W, 0);
	mapA = map;
	

	map[index] = vector<int>(W, 1);
	mapB = map;

	return inject(mapA, select) | inject(mapB, select);
}
int count(int select) {
	int cnt = 0;
	for (int i = 0; i < D; i++) {
		if (select & (1 << i)) cnt++;
	}
	return cnt;
}
int LineSelect(vector<vector<int> > map) {
	int find = 4;
	for (int select = 1; select < (1 << D) - 1; select++) {
		if (visited[select] >= find) continue;		
		if (inject(map, select)) find = visited[select];
	}
	return find;
}
int main() {
	int T;
	freopen("sample_input.txt", "r", stdin);
	cin >> T;

	for (int tc = 1; tc <= T; tc++) {
		cin >> D >> W >> K;

		vector<vector<int> > map(D, vector<int>(W, 0));
		for (int i = 0; i < D; i++) {
			for (int j = 0; j < W; j++) {
				cin >> map[i][j];
			}
		}
		if (check(map)) {
			cout << "#" << tc << " 0" << endl;
			continue;
		}
		for (int select = 1; select < (1 << D) - 1; select++) {
			visited[select] = count(select);
		}

		int ans = LineSelect(map);
		cout << "#" << tc << " " << ans << endl;
	}
	return 0;
}
